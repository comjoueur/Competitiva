Stack modification
We want to modify the stack data structure in such a way, that it possible to find the smallest element in the stack in O(1) time, while maintaining the same asymptotic behavior for adding and removing elements from the stack. Quick reminder, on a stack we only add and remove elements on one end.

To do this, we will no only store the elements in the stack, but we will store them in pairs: the element itself and the minimum in the stack starting from this element and below.

stack<pair<int, int>> st;
It is clear that finding the minimum in the whole stack consists only of looking at the value stack.top().second.

It is also obvious that adding or removing a new element to the stack can be done in constant time.

Implementation:

Adding an element:
int new_min = st.empty() ? new_elem : min(new_elem, st.top().second);
st.push({new_elem, new_min});

Removing an element:
int removed_element = st.top().first;
st.pop();

Finding the minimum:
int minimum = st.top().second;
